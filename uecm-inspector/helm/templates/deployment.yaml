apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
  labels:
    app: {{ .Values.deployment.name }}
spec:
  replicas: {{ .Values.deployment.replicas }} # 副本数量
  selector:
    matchLabels:
      app: {{ .Values.deployment.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.deployment.name }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{.Values.deployment.name }}
            topologyKey: "kubernetes.io/hostname"
      # imagePullSecrets:
      #   - name: docker-registry-secret
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 10
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 10
      containers:
        - name: {{ .Values.deployment.name }}
          image: '{{ .Values.deployment.image }}:{{ .Values.deployment.imageTag }}' # 镜像版本
          imagePullPolicy: {{ .Values.deployment.imagePullPolicy }}
          ports:
            - containerPort: {{ .Values.service.targetPort }} # POD端口
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          resources:
            limits:
              memory: 500Mi
            requests:
              memory: 200Mi
          volumeMounts:
            - name: localtime
              mountPath: /etc/localtime
              readOnly: true
            - name: cache-volume
              mountPath: /cache
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: cache-volume
          emptyDir: {}
      initContainers:
        - name: install-kubectl # 安装kubectl到cache-volume
          image: k8s-wait-for-endpoint:1.0.0
          command: ['sh', '-c', 'cp /usr/local/bin/kubectl /cache/kubectl']
          volumeMounts:
            - name: cache-volume
              mountPath: /cache

